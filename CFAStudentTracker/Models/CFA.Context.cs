//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CFAStudentTracker.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CFAEntities : DbContext
    {
        public CFAEntities()
            : base("name=CFAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FileType> FileType { get; set; }
        public virtual DbSet<GlobalSettings> GlobalSettings { get; set; }
        public virtual DbSet<Group> Group { get; set; }
        public virtual DbSet<Hour> Hour { get; set; }
        public virtual DbSet<Note> Note { get; set; }
        public virtual DbSet<Processing> Processing { get; set; }
        public virtual DbSet<Queue> Queue { get; set; }
        public virtual DbSet<QueueOrder> QueueOrder { get; set; }
        public virtual DbSet<QueuePriority> QueuePriority { get; set; }
        public virtual DbSet<Record> Record { get; set; }
        public virtual DbSet<StudentFile> StudentFile { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<ProcessingError> ProcessingError { get; set; }
        public virtual DbSet<ErrorComplete> ErrorComplete { get; set; }
        public virtual DbSet<ErrorType> ErrorType { get; set; }
        public virtual DbSet<WeightedFile> WeightedFile { get; set; }
        public virtual DbSet<TimeCategory> TimeCategory { get; set; }
        public virtual DbSet<TimeEntry> TimeEntry { get; set; }
    
        [DbFunction("CFAEntities", "AverageFilesPerHour")]
        public virtual IQueryable<AverageFilesPerHour_Result> AverageFilesPerHour(Nullable<System.DateTime> inDateOld, Nullable<System.DateTime> inDateNew)
        {
            var inDateOldParameter = inDateOld.HasValue ?
                new ObjectParameter("InDateOld", inDateOld) :
                new ObjectParameter("InDateOld", typeof(System.DateTime));
    
            var inDateNewParameter = inDateNew.HasValue ?
                new ObjectParameter("InDateNew", inDateNew) :
                new ObjectParameter("InDateNew", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AverageFilesPerHour_Result>("[CFAEntities].[AverageFilesPerHour](@InDateOld, @InDateNew)", inDateOldParameter, inDateNewParameter);
        }
    
        [DbFunction("CFAEntities", "FilesInQueue")]
        public virtual IQueryable<FilesInQueue_Result> FilesInQueue(Nullable<short> insQueue)
        {
            var insQueueParameter = insQueue.HasValue ?
                new ObjectParameter("InsQueue", insQueue) :
                new ObjectParameter("InsQueue", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FilesInQueue_Result>("[CFAEntities].[FilesInQueue](@InsQueue)", insQueueParameter);
        }
    
        [DbFunction("CFAEntities", "GetQueues")]
        public virtual IQueryable<GetQueues_Result> GetQueues(string insUsername)
        {
            var insUsernameParameter = insUsername != null ?
                new ObjectParameter("InsUsername", insUsername) :
                new ObjectParameter("InsUsername", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetQueues_Result>("[CFAEntities].[GetQueues](@InsUsername)", insUsernameParameter);
        }
    
        [DbFunction("CFAEntities", "UserFilingCabinet")]
        public virtual IQueryable<UserFilingCabinet_Result> UserFilingCabinet(string insUsername)
        {
            var insUsernameParameter = insUsername != null ?
                new ObjectParameter("InsUsername", insUsername) :
                new ObjectParameter("InsUsername", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<UserFilingCabinet_Result>("[CFAEntities].[UserFilingCabinet](@InsUsername)", insUsernameParameter);
        }
    
        [DbFunction("CFAEntities", "UserQueue")]
        public virtual IQueryable<UserQueue_Result> UserQueue(string insUsername, Nullable<short> insQueueID)
        {
            var insUsernameParameter = insUsername != null ?
                new ObjectParameter("InsUsername", insUsername) :
                new ObjectParameter("InsUsername", typeof(string));
    
            var insQueueIDParameter = insQueueID.HasValue ?
                new ObjectParameter("InsQueueID", insQueueID) :
                new ObjectParameter("InsQueueID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<UserQueue_Result>("[CFAEntities].[UserQueue](@InsUsername, @InsQueueID)", insUsernameParameter, insQueueIDParameter);
        }
    
        [DbFunction("CFAEntities", "UsersInQueue")]
        public virtual IQueryable<UsersInQueue_Result> UsersInQueue(Nullable<short> insQueue)
        {
            var insQueueParameter = insQueue.HasValue ?
                new ObjectParameter("InsQueue", insQueue) :
                new ObjectParameter("InsQueue", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<UsersInQueue_Result>("[CFAEntities].[UsersInQueue](@InsQueue)", insQueueParameter);
        }
    
        public virtual int InsertIntoQueue(string fileSSN, string fileName, Nullable<short> fileTypeID, Nullable<short> queueID, string note1, string note2, string username, Nullable<System.DateTime> dOD, Nullable<System.DateTime> lDA)
        {
            var fileSSNParameter = fileSSN != null ?
                new ObjectParameter("FileSSN", fileSSN) :
                new ObjectParameter("FileSSN", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileTypeIDParameter = fileTypeID.HasValue ?
                new ObjectParameter("FileTypeID", fileTypeID) :
                new ObjectParameter("FileTypeID", typeof(short));
    
            var queueIDParameter = queueID.HasValue ?
                new ObjectParameter("QueueID", queueID) :
                new ObjectParameter("QueueID", typeof(short));
    
            var note1Parameter = note1 != null ?
                new ObjectParameter("Note1", note1) :
                new ObjectParameter("Note1", typeof(string));
    
            var note2Parameter = note2 != null ?
                new ObjectParameter("Note2", note2) :
                new ObjectParameter("Note2", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var dODParameter = dOD.HasValue ?
                new ObjectParameter("DOD", dOD) :
                new ObjectParameter("DOD", typeof(System.DateTime));
    
            var lDAParameter = lDA.HasValue ?
                new ObjectParameter("LDA", lDA) :
                new ObjectParameter("LDA", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoQueue", fileSSNParameter, fileNameParameter, fileTypeIDParameter, queueIDParameter, note1Parameter, note2Parameter, usernameParameter, dODParameter, lDAParameter);
        }
    
        public virtual int RemoveFromQueue(string fileSSN, Nullable<short> queueID, string note1, string username)
        {
            var fileSSNParameter = fileSSN != null ?
                new ObjectParameter("FileSSN", fileSSN) :
                new ObjectParameter("FileSSN", typeof(string));
    
            var queueIDParameter = queueID.HasValue ?
                new ObjectParameter("QueueID", queueID) :
                new ObjectParameter("QueueID", typeof(short));
    
            var note1Parameter = note1 != null ?
                new ObjectParameter("Note1", note1) :
                new ObjectParameter("Note1", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveFromQueue", fileSSNParameter, queueIDParameter, note1Parameter, usernameParameter);
        }
    
        public virtual int sp_GetNextFile(string insUsername, Nullable<short> queueID)
        {
            var insUsernameParameter = insUsername != null ?
                new ObjectParameter("InsUsername", insUsername) :
                new ObjectParameter("InsUsername", typeof(string));
    
            var queueIDParameter = queueID.HasValue ?
                new ObjectParameter("QueueID", queueID) :
                new ObjectParameter("QueueID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetNextFile", insUsernameParameter, queueIDParameter);
        }
    
        public virtual int sp_InsertUser(string insUsername, Nullable<bool> insIsActive, Nullable<bool> insIsSupervisor)
        {
            var insUsernameParameter = insUsername != null ?
                new ObjectParameter("InsUsername", insUsername) :
                new ObjectParameter("InsUsername", typeof(string));
    
            var insIsActiveParameter = insIsActive.HasValue ?
                new ObjectParameter("insIsActive", insIsActive) :
                new ObjectParameter("insIsActive", typeof(bool));
    
            var insIsSupervisorParameter = insIsSupervisor.HasValue ?
                new ObjectParameter("insIsSupervisor", insIsSupervisor) :
                new ObjectParameter("insIsSupervisor", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUser", insUsernameParameter, insIsActiveParameter, insIsSupervisorParameter);
        }
    
        public virtual int sp_CompleteProcessing(Nullable<long> insProcID, Nullable<short> curQueueID)
        {
            var insProcIDParameter = insProcID.HasValue ?
                new ObjectParameter("InsProcID", insProcID) :
                new ObjectParameter("InsProcID", typeof(long));
    
            var curQueueIDParameter = curQueueID.HasValue ?
                new ObjectParameter("CurQueueID", curQueueID) :
                new ObjectParameter("CurQueueID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompleteProcessing", insProcIDParameter, curQueueIDParameter);
        }
    }
}
